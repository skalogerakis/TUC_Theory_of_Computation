-- LIN2 or 3 and 5 = 3 < 4 + 34 - 5 != -2 not -a * 3 % 4 + -2
-- sdf(a+1) % cube(b+3)
--a + b[(k +1)*2]
--q[(s + 2)]
--return ;
--while not 2 loop
--	y <- x+ 5;
--	y <- x+ 5;
--pool;

--if a * 4 then
	

--	if v * r then 
--	y <- x+ 5;
--	fi;

--fi;

--let test[24] <- 7, x <- 5 : real;
--const we[2]<-9, x <- 5 : string;


const takis <- (s[]: string, r: real, p: int, i[]: real) : [] real =>{
	while not 2 loop
		y <- x+ 5;

		if v * r then 
			y <- x+ 5;
		fi;
		
		y <- x+ 5;
	pool;

	if v * r then 
		y <- x+ 5;
	fi;

	e <- rw % 5;

	talis(tsokailo / 3, tso2);

	return a * a ;
}


(*const start <- () : int =>{
	while not 2 loop
		y <- x+ 5;

		if v * r then 
			y <- x+ 5;
		fi;
		
		y <- x+ 5;
	pool;

	if v * r then 
		y <- x+ 5;
	fi;

	e <- rw % 5;

	talis(tsokailo / 3, tso2);

	return a * a ;
}*)
--const testaer <- 9 : int;

--const x {y}
